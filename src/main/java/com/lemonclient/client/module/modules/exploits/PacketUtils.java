package com.lemonclient.client.module.modules.exploits;

import com.lemonclient.api.event.events.BlockResetEvent;
import com.lemonclient.api.event.events.PacketEvent;
import com.lemonclient.api.event.events.PlayerJumpEvent;
import com.lemonclient.api.setting.values.BooleanSetting;
import com.lemonclient.api.setting.values.IntegerSetting;
import com.lemonclient.api.util.misc.Timer;
import com.lemonclient.api.util.player.PlayerUtil;
import com.lemonclient.client.module.Category;
import com.lemonclient.client.module.Module;
import java.util.function.Predicate;
import me.zero.alpine.listener.EventHandler;
import me.zero.alpine.listener.Listener;
import net.minecraft.block.BlockContainer;
import net.minecraft.init.Items;
import net.minecraft.network.play.client.CPacketEntityAction;
import net.minecraft.network.play.client.CPacketPlayerTryUseItemOnBlock;
import net.minecraft.network.play.client.CPacketEntityAction.Action;
import net.minecraft.network.play.server.SPacketPlayerPosLook;

@Module.Declaration(
   name = "PacketUtils",
   category = Category.Exploits
)
public class PacketUtils extends Module {
   private boolean shouldStop = false;
   BooleanSetting breakReset = this.registerBoolean("No Break Reset", false);
   BooleanSetting noRotate = this.registerBoolean("No Rotate", false);
   BooleanSetting noInteract = this.registerBoolean("No Interact", false);
   BooleanSetting containerOnly = this.registerBoolean("Container Only", false, () -> {
      return (Boolean)this.noInteract.getValue();
   });
   BooleanSetting onlyGapple = this.registerBoolean("Only Gapple", false, () -> {
      return (Boolean)this.noInteract.getValue();
   });
   BooleanSetting packetJump = this.registerBoolean("Packet Jump", false);
   IntegerSetting delay = this.registerInteger("Min Jump Delay", 0, 0, 50, () -> {
      return (Boolean)this.packetJump.getValue();
   });
   public BooleanSetting packetUse = this.registerBoolean("Packet Use", false);
   public BooleanSetting food = this.registerBoolean("Food", true, () -> {
      return (Boolean)this.packetUse.getValue();
   });
   public BooleanSetting potion = this.registerBoolean("Potion", true, () -> {
      return (Boolean)this.packetUse.getValue();
   });
   public BooleanSetting all = this.registerBoolean("All", false, () -> {
      return (Boolean)this.packetUse.getValue();
   });
   public BooleanSetting cancel = this.registerBoolean("Stop Hand Active", true, () -> {
      return (Boolean)this.packetUse.getValue();
   });
   Timer timer = new Timer();
   @EventHandler
   private final Listener<PlayerJumpEvent> jumpEventListener = new Listener((event) -> {
      if ((Boolean)this.packetJump.getValue() && ((Integer)this.delay.getValue() == 0 || this.timer.hasReached((long)(Integer)this.delay.getValue(), true) && mc.field_71439_g.field_70122_E)) {
         PlayerUtil.fakeJump();
         mc.field_71439_g.func_70107_b(mc.field_71439_g.field_70165_t, mc.field_71439_g.field_70163_u + 1.1661092609382D, mc.field_71439_g.field_70161_v);
         mc.field_71439_g.field_70181_x = -0.0830778178D;
         event.cancel();
      }

   }, new Predicate[0]);
   @EventHandler
   private final Listener<PacketEvent.Send> sendListener = new Listener((event) -> {
      if (mc.field_71441_e != null && mc.field_71439_g != null && !mc.field_71439_g.field_70128_L) {
         if (event.getPacket() instanceof CPacketPlayerTryUseItemOnBlock && !mc.field_71439_g.func_70093_af() && (Boolean)this.noInteract.getValue()) {
            CPacketPlayerTryUseItemOnBlock packet = (CPacketPlayerTryUseItemOnBlock)event.getPacket();
            if ((Boolean)this.containerOnly.getValue() && !(mc.field_71441_e.func_180495_p(packet.func_187023_a()).func_177230_c() instanceof BlockContainer) || (Boolean)this.onlyGapple.getValue() && mc.field_71439_g.func_184614_ca().func_77973_b() != Items.field_151153_ao) {
               return;
            }

            mc.field_71439_g.field_71174_a.func_147297_a(new CPacketEntityAction(mc.field_71439_g, Action.START_SNEAKING));
            this.shouldStop = true;
         }

      }
   }, new Predicate[0]);
   @EventHandler
   private final Listener<BlockResetEvent> blockResetEventListener = new Listener((event) -> {
      if (mc.field_71441_e != null && mc.field_71439_g != null && !mc.field_71439_g.field_70128_L) {
         if ((Boolean)this.breakReset.getValue()) {
            event.cancel();
         }

      }
   }, new Predicate[0]);
   @EventHandler
   private final Listener<PacketEvent.PostSend> postSendListener = new Listener((event) -> {
      if (mc.field_71441_e != null && mc.field_71439_g != null && !mc.field_71439_g.field_70128_L) {
         if (event.getPacket() instanceof CPacketPlayerTryUseItemOnBlock && this.shouldStop && (Boolean)this.noInteract.getValue()) {
            CPacketPlayerTryUseItemOnBlock packet = (CPacketPlayerTryUseItemOnBlock)event.getPacket();
            if ((Boolean)this.containerOnly.getValue() && !(mc.field_71441_e.func_180495_p(packet.func_187023_a()).func_177230_c() instanceof BlockContainer)) {
               return;
            }

            mc.field_71439_g.field_71174_a.func_147297_a(new CPacketEntityAction(mc.field_71439_g, Action.STOP_SNEAKING));
            this.shouldStop = false;
         }

      }
   }, new Predicate[0]);
   @EventHandler
   private final Listener<PacketEvent.Receive> receiveListener = new Listener((event) -> {
      if (mc.field_71441_e != null && mc.field_71439_g != null && !mc.field_71439_g.field_70128_L) {
         if (event.getPacket() instanceof SPacketPlayerPosLook && (Boolean)this.noRotate.getValue()) {
            SPacketPlayerPosLook e = (SPacketPlayerPosLook)event.getPacket();
            e.field_148937_e = mc.field_71439_g.field_70125_A;
            e.field_148936_d = mc.field_71439_g.field_70177_z;
         }

      }
   }, new Predicate[0]);
}
