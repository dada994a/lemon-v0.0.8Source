package com.lemonclient.client.module.modules.exploits;

import com.lemonclient.api.event.Phase;
import com.lemonclient.api.event.events.DamageBlockEvent;
import com.lemonclient.api.event.events.OnUpdateWalkingPlayerEvent;
import com.lemonclient.api.event.events.PacketEvent;
import com.lemonclient.api.event.events.RenderEvent;
import com.lemonclient.api.setting.values.BooleanSetting;
import com.lemonclient.api.setting.values.ColorSetting;
import com.lemonclient.api.setting.values.DoubleSetting;
import com.lemonclient.api.setting.values.IntegerSetting;
import com.lemonclient.api.setting.values.ModeSetting;
import com.lemonclient.api.util.misc.Timing;
import com.lemonclient.api.util.misc.Wrapper;
import com.lemonclient.api.util.player.PlayerPacket;
import com.lemonclient.api.util.player.RotationUtil;
import com.lemonclient.api.util.render.GSColor;
import com.lemonclient.api.util.render.RenderUtil;
import com.lemonclient.api.util.world.BlockUtil;
import com.lemonclient.api.util.world.combat.CrystalUtil;
import com.lemonclient.client.manager.managers.PlayerPacketManager;
import com.lemonclient.client.module.Category;
import com.lemonclient.client.module.Module;
import com.lemonclient.client.module.ModuleManager;
import com.lemonclient.client.module.modules.combat.AutoMend;
import java.util.Arrays;
import java.util.Iterator;
import java.util.function.Predicate;
import me.zero.alpine.listener.EventHandler;
import me.zero.alpine.listener.Listener;
import net.minecraft.block.BlockPistonMoving;
import net.minecraft.block.material.Material;
import net.minecraft.block.state.IBlockState;
import net.minecraft.enchantment.EnchantmentHelper;
import net.minecraft.entity.Entity;
import net.minecraft.entity.item.EntityEnderCrystal;
import net.minecraft.init.Enchantments;
import net.minecraft.init.MobEffects;
import net.minecraft.inventory.ClickType;
import net.minecraft.item.ItemEndCrystal;
import net.minecraft.item.ItemStack;
import net.minecraft.item.ItemSword;
import net.minecraft.item.ItemTool;
import net.minecraft.network.play.client.CPacketAnimation;
import net.minecraft.network.play.client.CPacketClickWindow;
import net.minecraft.network.play.client.CPacketHeldItemChange;
import net.minecraft.network.play.client.CPacketPlayerDigging;
import net.minecraft.network.play.client.CPacketPlayerTryUseItemOnBlock;
import net.minecraft.network.play.client.CPacketPlayerDigging.Action;
import net.minecraft.network.play.server.SPacketBlockChange;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.EnumHand;
import net.minecraft.util.math.AxisAlignedBB;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.Vec2f;
import net.minecraft.util.math.Vec3d;

@Module.Declaration(
   name = "PacketMine",
   category = Category.Exploits,
   priority = 250
)
public class PacketMine extends Module {
   public static PacketMine INSTANCE;
   ModeSetting page = this.registerMode("Page", Arrays.asList("Settings", "DoubleMine", "Switch", "Cev", "Render"), "Settings");
   IntegerSetting delay = this.registerInteger("Delay", 0, 0, 1000, () -> {
      return ((String)this.page.getValue()).equals("Settings");
   });
   public DoubleSetting breakRange = this.registerDouble("Break Range", 5.0D, 0.0D, 10.0D, () -> {
      return ((String)this.page.getValue()).equals("Settings");
   });
   ModeSetting creativeMode = this.registerMode("Creative Mode", Arrays.asList("Auto", "Always", "Never"), "Auto", () -> {
      return ((String)this.page.getValue()).equals("Settings");
   });
   ModeSetting breakMode = this.registerMode("Mode", Arrays.asList("SendPacket", "DamageBlockEvent"), "DamageBlockEvent", () -> {
      return ((String)this.page.getValue()).equals("Settings");
   });
   DoubleSetting multiplier = this.registerDouble("Multiplier", 1.0D, 0.1D, 2.0D, () -> {
      return ((String)this.page.getValue()).equals("Settings");
   });
   IntegerSetting breakTime = this.registerInteger("Break Time", 70, 50, 120, () -> {
      return ((String)this.page.getValue()).equals("Settings");
   });
   BooleanSetting instant = this.registerBoolean("Instant", true, () -> {
      return ((String)this.page.getValue()).equals("Settings");
   });
   BooleanSetting avoid = this.registerBoolean("Check Unbreakable", true, () -> {
      return ((String)this.page.getValue()).equals("Settings");
   });
   BooleanSetting strict = this.registerBoolean("Strict", false, () -> {
      return ((String)this.page.getValue()).equals("Settings");
   });
   BooleanSetting strictFacing = this.registerBoolean("Strict Facing", false, () -> {
      return ((String)this.page.getValue()).equals("Settings");
   });
   BooleanSetting ignoreChecks = this.registerBoolean("Ignore Checks", true, () -> {
      return ((String)this.page.getValue()).equals("Settings");
   });
   BooleanSetting swing = this.registerBoolean("Swing", false, () -> {
      return ((String)this.page.getValue()).equals("Settings");
   });
   BooleanSetting packetSwing = this.registerBoolean("Packet Swing", false, () -> {
      return ((String)this.page.getValue()).equals("Settings") && (Boolean)this.swing.getValue();
   });
   BooleanSetting forceRotation = this.registerBoolean("Force Rotation", false, () -> {
      return ((String)this.page.getValue()).equals("Settings");
   });
   IntegerSetting rotateTime = this.registerInteger("Rotate Time", 100, 0, 1000, () -> {
      return ((String)this.page.getValue()).equals("Settings") && (Boolean)this.forceRotation.getValue();
   });
   IntegerSetting sendRange = this.registerInteger("SendPacket Range", 16, 0, 256, () -> {
      return ((String)this.page.getValue()).equals("Settings");
   });
   IntegerSetting rangeDisableBreaker = this.registerInteger("Remove Range", 16, 0, 256, () -> {
      return ((String)this.page.getValue()).equals("Settings");
   });
   BooleanSetting double_mine = this.registerBoolean("Double Mine", true, () -> {
      return ((String)this.page.getValue()).equals("DoubleMine");
   });
   IntegerSetting doubleCalc = this.registerInteger("DoubleMine Calc", 70, 50, 120, () -> {
      return this.double_mine.isVisible() && (Boolean)this.double_mine.getValue();
   });
   IntegerSetting maxTick = this.registerInteger("MaxTick", 20, 0, 100, () -> {
      return this.double_mine.isVisible() && (Boolean)this.double_mine.getValue();
   });
   DoubleSetting minHealth = this.registerDouble("Min Health", 16.0D, 0.0D, 36.0D, () -> {
      return this.double_mine.isVisible() && (Boolean)this.double_mine.getValue();
   });
   BooleanSetting pause = this.registerBoolean("Pause When Mending", true, () -> {
      return this.double_mine.isVisible() && (Boolean)this.double_mine.getValue();
   });
   BooleanSetting autoSwitch = this.registerBoolean("Auto Switch", true, () -> {
      return ((String)this.page.getValue()).equals("Switch");
   });
   BooleanSetting wait = this.registerBoolean("Wait DoubleMine", false, () -> {
      return ((String)this.page.getValue()).equals("Switch") && (Boolean)this.autoSwitch.getValue() && (Boolean)this.double_mine.getValue();
   });
   BooleanSetting bypassSwitch = this.registerBoolean("Bypass Switch", false, () -> {
      return ((String)this.page.getValue()).equals("Switch") && (Boolean)this.autoSwitch.getValue();
   });
   BooleanSetting only = this.registerBoolean("Inventory Only", false, () -> {
      return ((String)this.page.getValue()).equals("Switch") && (Boolean)this.autoSwitch.getValue() && (Boolean)this.bypassSwitch.getValue();
   });
   BooleanSetting noDesync = this.registerBoolean("No Desync", false, () -> {
      return ((String)this.page.getValue()).equals("Switch") && (Boolean)this.autoSwitch.getValue() && (Boolean)this.bypassSwitch.getValue();
   });
   BooleanSetting fastSwitch = this.registerBoolean("DoubleMine FastSwitch", false, () -> {
      return ((String)this.page.getValue()).equals("Switch") && (Boolean)this.autoSwitch.getValue() && (Boolean)this.double_mine.getValue();
   });
   BooleanSetting update = this.registerBoolean("DoubleMine UpdateController", false, () -> {
      return ((String)this.page.getValue()).equals("Switch") && (Boolean)this.autoSwitch.getValue() && (Boolean)this.double_mine.getValue();
   });
   BooleanSetting switchBack = this.registerBoolean("Switch Back", true, () -> {
      return ((String)this.page.getValue()).equals("Switch") && (Boolean)this.autoSwitch.getValue();
   });
   BooleanSetting packetSwitch = this.registerBoolean("Packet Switch", false, () -> {
      return ((String)this.page.getValue()).equals("Switch") && (Boolean)this.autoSwitch.getValue();
   });
   BooleanSetting place = this.registerBoolean("Place Crystal", false, () -> {
      return ((String)this.page.getValue()).equals("Cev");
   });
   BooleanSetting high = this.registerBoolean("1.13+", false, () -> {
      return this.place.isVisible() && (Boolean)this.place.getValue();
   });
   ModeSetting breakCrystal = this.registerMode("Break Crystal", Arrays.asList("Vanilla", "Packet", "None"), "Packet", () -> {
      return this.high.isVisible();
   });
   BooleanSetting antiWeakness = this.registerBoolean("AntiWeakness", true, () -> {
      return this.breakCrystal.isVisible() && !((String)this.breakCrystal.getValue()).equals("None");
   });
   IntegerSetting renderRange = this.registerInteger("Render Range", 16, 0, 256, () -> {
      return ((String)this.page.getValue()).equals("Render");
   });
   BooleanSetting showProgress = this.registerBoolean("Show Progress", false, () -> {
      return ((String)this.page.getValue()).equals("Render");
   });
   BooleanSetting customColor = this.registerBoolean("Custom Color", false, () -> {
      return ((String)this.page.getValue()).equals("Render") && (Boolean)this.showProgress.getValue();
   });
   ColorSetting progressColor = this.registerColor("Progress Color", new GSColor(255, 0, 0), () -> {
      return ((String)this.page.getValue()).equals("Render") && (Boolean)this.showProgress.getValue() && (Boolean)this.customColor.getValue();
   });
   IntegerSetting decimal = this.registerInteger("Decimal", 2, 0, 2, () -> {
      return ((String)this.page.getValue()).equals("Render") && (Boolean)this.showProgress.getValue();
   });
   BooleanSetting display = this.registerBoolean("Display", true, () -> {
      return ((String)this.page.getValue()).equals("Render");
   });
   ColorSetting blockColor = this.registerColor("Block Color", new GSColor(255, 0, 0), () -> {
      return ((String)this.page.getValue()).equals("Render") && (Boolean)this.display.getValue();
   });
   ColorSetting doneColor = this.registerColor("Done Color", new GSColor(0, 255, 0), () -> {
      return ((String)this.page.getValue()).equals("Render") && (Boolean)this.display.getValue();
   });
   ColorSetting doubleBlockColor = this.registerColor("Double Color", new GSColor(0, 255, 0), () -> {
      return ((String)this.page.getValue()).equals("Render") && (Boolean)this.display.getValue();
   });
   ModeSetting renderMode = this.registerMode("Render", Arrays.asList("Outline", "Fill", "Both"), "Both", () -> {
      return ((String)this.page.getValue()).equals("Render") && (Boolean)this.display.getValue();
   });
   ModeSetting animationMode = this.registerMode("AnimationMode", Arrays.asList("Down", "Up", "Normal", "Double", "Desync", "Horizontal", "None"), "Normal", () -> {
      return ((String)this.page.getValue()).equals("Render") && (Boolean)this.display.getValue();
   });
   IntegerSetting pow = this.registerInteger("Pow", 2, 1, 10, () -> {
      return ((String)this.page.getValue()).equals("Render") && (Boolean)this.display.getValue() && !((String)this.animationMode.getValue()).equals("None");
   });
   BooleanSetting instead = this.registerBoolean("Instead", false, () -> {
      return ((String)this.page.getValue()).equals("Render") && (Boolean)this.display.getValue() && !((String)this.animationMode.getValue()).equals("None");
   });
   BooleanSetting doubleRender = this.registerBoolean("Double", false, () -> {
      return ((String)this.page.getValue()).equals("Render") && (Boolean)this.display.getValue() && ((String)this.animationMode.getValue()).equals("Desync");
   });
   DoubleSetting fillStart = this.registerDouble("FillStart", 0.20000000298023224D, 0.0D, 1.0D, () -> {
      return ((String)this.page.getValue()).equals("Render") && (Boolean)this.display.getValue() && ((String)this.animationMode.getValue()).equals("Desync");
   });
   DoubleSetting boxStart = this.registerDouble("BoxStart", 0.4000000059604645D, 0.0D, 1.0D, () -> {
      return ((String)this.page.getValue()).equals("Render") && (Boolean)this.display.getValue() && ((String)this.animationMode.getValue()).equals("Desync");
   });
   DoubleSetting boxExtend = this.registerDouble("BoxExtend", 0.20000000298023224D, 0.0D, 1.0D, () -> {
      return ((String)this.page.getValue()).equals("Render") && (Boolean)this.display.getValue() && ((String)this.animationMode.getValue()).equals("Desync");
   });
   IntegerSetting alpha = this.registerInteger("Alpha", 50, 0, 255, () -> {
      return ((String)this.page.getValue()).equals("Render") && (Boolean)this.display.getValue();
   });
   IntegerSetting width = this.registerInteger("Width", 1, 1, 10, () -> {
      return ((String)this.page.getValue()).equals("Render") && (Boolean)this.display.getValue();
   });
   public BlockPos packetPos;
   public BlockPos doublePos;
   public PacketMine.breakPos lastBlock;
   public PacketMine.breakPos doubleMine;
   boolean hadDouble;
   boolean should;
   boolean cev;
   boolean isMending;
   boolean healthAbove;
   boolean allow;
   boolean different;
   int bypass;
   int lastSlot;
   ItemStack itemStack;
   Vec3d lastHitVec = null;
   Timing timer = new Timing();
   Timing doubleTimer = new Timing();
   @EventHandler
   private final Listener<DamageBlockEvent> listener = new Listener((event) -> {
      if (mc.field_71441_e != null && mc.field_71439_g != null && !mc.field_71439_g.field_70128_L) {
         if (!((String)this.breakMode.getValue()).equals("SendPacket")) {
            if (!this.creative()) {
               event.cancel();
            }

            if (this.inRange(event.getBlockPos(), (Double)this.breakRange.getValue())) {
               if (this.calcBreakTime(event.getBlockPos()) < 0 && !(BlockUtil.getBlock(event.getBlockPos()) instanceof BlockPistonMoving)) {
                  if (!(Boolean)this.avoid.getValue()) {
                     this.newDouble();
                     this.lastBlock = null;
                  }

               } else if (!this.isPos2(this.lastBlock != null ? this.lastBlock.pos : null, event.getBlockPos())) {
                  if ((Boolean)this.forceRotation.getValue()) {
                     this.setVec3d(event.getBlockPos(), event.getEnumFacing());
                  }

                  this.newDouble();
                  this.allow = true;
                  EnumFacing facing = event.getEnumFacing();
                  if ((Boolean)this.strictFacing.getValue()) {
                     facing = BlockUtil.getRayTraceFacing(event.getBlockPos(), facing);
                  }

                  this.lastBlock = new PacketMine.breakPos(event.getBlockPos(), facing, System.currentTimeMillis(), this.calcBreakTime(event.getBlockPos()));
                  mc.field_71439_g.field_71174_a.func_147297_a(new CPacketPlayerDigging(Action.START_DESTROY_BLOCK, this.lastBlock.pos, this.lastBlock.facing));
                  mc.field_71439_g.field_71174_a.func_147297_a(new CPacketPlayerDigging(Action.STOP_DESTROY_BLOCK, this.lastBlock.pos, this.lastBlock.facing));
                  if ((Boolean)this.swing.getValue()) {
                     if ((Boolean)this.packetSwing.getValue()) {
                        mc.field_71439_g.field_71174_a.func_147297_a(new CPacketAnimation(EnumHand.MAIN_HAND));
                     } else {
                        mc.field_71439_g.func_184609_a(EnumHand.MAIN_HAND);
                     }
                  }

                  if (this.doubleMine != null && this.lastBlock != null && this.isPos2(this.doubleMine.pos, this.lastBlock.pos)) {
                     this.lastBlock = new PacketMine.breakPos(this.lastBlock.pos, this.lastBlock.facing, this.doubleMine.getStart(), this.calcBreakTime(this.lastBlock.pos));
                     this.resetDouble();
                  }

                  if (this.doubleMine == null) {
                     this.hadDouble = false;
                  }

               }
            }
         }
      }
   }, new Predicate[0]);
   @EventHandler
   private final Listener<PacketEvent.Send> packetListener = new Listener((event) -> {
      if (mc.field_71441_e != null && mc.field_71439_g != null) {
         if (event.getPacket() instanceof CPacketPlayerDigging) {
            CPacketPlayerDigging packet = (CPacketPlayerDigging)event.getPacket();
            if (packet.func_180762_c() == Action.START_DESTROY_BLOCK) {
               if (((String)this.breakMode.getValue()).equals("SendPacket")) {
                  BlockPos pos = packet.func_179715_a();
                  EnumFacing facing = packet.func_179714_b();
                  if ((Boolean)this.strictFacing.getValue()) {
                     facing = BlockUtil.getRayTraceFacing(pos, facing);
                  }

                  if (!this.inRange(pos, (Double)this.breakRange.getValue())) {
                     event.cancel();
                     return;
                  }

                  if (this.calcBreakTime(pos) < 0 && !(BlockUtil.getBlock(pos) instanceof BlockPistonMoving)) {
                     if (!(Boolean)this.avoid.getValue()) {
                        this.newDouble();
                        this.lastBlock = null;
                     }

                     event.cancel();
                     return;
                  }

                  if (this.isPos2(this.lastBlock != null ? this.lastBlock.pos : null, pos) && !this.allow) {
                     event.cancel();
                     return;
                  }

                  this.allow = false;
                  if ((Boolean)this.forceRotation.getValue()) {
                     this.setVec3d(pos, facing);
                  }

                  this.newDouble();
                  this.lastBlock = new PacketMine.breakPos(pos, facing, System.currentTimeMillis(), this.calcBreakTime(pos));
                  mc.field_71439_g.field_71174_a.func_147297_a(new CPacketPlayerDigging(Action.STOP_DESTROY_BLOCK, this.lastBlock.pos, this.lastBlock.facing));
                  if ((Boolean)this.swing.getValue()) {
                     if ((Boolean)this.packetSwing.getValue()) {
                        mc.field_71439_g.field_71174_a.func_147297_a(new CPacketAnimation(EnumHand.MAIN_HAND));
                     } else {
                        mc.field_71439_g.func_184609_a(EnumHand.MAIN_HAND);
                     }
                  }

                  if (this.doubleMine != null && this.lastBlock != null && this.isPos2(this.doubleMine.pos, this.lastBlock.pos)) {
                     this.lastBlock = new PacketMine.breakPos(this.lastBlock.pos, this.lastBlock.facing, this.doubleMine.getStart(), this.calcBreakTime(this.lastBlock.pos));
                     this.resetDouble();
                  }

                  if (this.doubleMine == null) {
                     this.hadDouble = false;
                  }
               } else if (!this.creative()) {
                  if (this.allow) {
                     this.allow = false;
                     return;
                  }

                  event.cancel();
               }
            }
         }

      }
   }, new Predicate[0]);
   @EventHandler
   private final Listener<PacketEvent.PostSend> postSendListener = new Listener((event) -> {
      if (mc.field_71441_e != null && mc.field_71439_g != null) {
         if (event.getPacket() instanceof CPacketHeldItemChange) {
            int slot = ((CPacketHeldItemChange)event.getPacket()).func_149614_c();
            if (slot != this.lastSlot) {
               this.lastSlot = slot;
               this.different = true;
            }
         }

      }
   }, new Predicate[0]);
   @EventHandler
   private final Listener<PacketEvent.Receive> receiveListener = new Listener((event) -> {
      if (mc.field_71441_e != null && mc.field_71439_g != null) {
         if (event.getPacket() instanceof SPacketBlockChange) {
            SPacketBlockChange packet = (SPacketBlockChange)event.getPacket();
            if (this.lastBlock != null && this.isPos2(packet.func_179827_b(), this.lastBlock.pos)) {
               this.lastBlock.update();
               this.should = !BlockUtil.airBlocks.contains(packet.field_148883_d.func_177230_c());
            }

            if (this.doubleMine != null && this.isPos2(packet.func_179827_b(), this.doubleMine.pos)) {
               if (BlockUtil.airBlocks.contains(packet.field_148883_d.func_177230_c())) {
                  this.resetDouble();
               } else {
                  this.doubleMine.updateDouble();
               }
            }
         }

      }
   }, new Predicate[0]);
   @EventHandler
   private final Listener<OnUpdateWalkingPlayerEvent> onUpdateWalkingPlayerEventListener = new Listener((event) -> {
      if (event.getPhase() == Phase.PRE && this.lastHitVec != null && (Boolean)this.forceRotation.getValue() && this.lastBlock != null) {
         if (this.lastBlock.getEnd() - (long)(Integer)this.rotateTime.getValue() <= System.currentTimeMillis()) {
            if (BlockUtil.isAir(this.lastBlock.pos)) {
               return;
            }

            Vec2f rotation = RotationUtil.getRotationTo(this.lastHitVec);
            PlayerPacket packet = new PlayerPacket(this, rotation);
            PlayerPacketManager.INSTANCE.addPacket(packet);
         }

      }
   }, new Predicate[0]);

   public PacketMine() {
      INSTANCE = this;
   }

   public void onEnable() {
      this.reset();
   }

   public void onDisable() {
      this.reset();
   }

   public void onTick() {
      this.mine();
      if (mc.field_71441_e != null && mc.field_71439_g != null && !mc.field_71439_g.field_70128_L) {
         if (this.lastBlock != null && this.doubleMine != null) {
            this.hadDouble = true;
         }

         this.packetPos = this.lastBlock != null ? this.lastBlock.pos : null;
         this.doublePos = this.doubleMine != null ? this.doubleMine.pos : null;
      }
   }

   private void mine() {
      if (mc.field_71441_e != null && mc.field_71439_g != null && !mc.field_71439_g.field_70128_L) {
         if (!(Boolean)this.double_mine.getValue()) {
            this.resetDouble();
         }

         if (this.lastBlock != null && (this.calcBreakTime(this.lastBlock.pos) < 0 && !(BlockUtil.getBlock(this.lastBlock.pos) instanceof BlockPistonMoving) || !this.inRange(this.lastBlock.pos, (double)(Integer)this.rangeDisableBreaker.getValue()))) {
            this.lastBlock = null;
         }

         if ((Boolean)this.strict.getValue() && this.lastBlock != null && this.different && this.inRange(this.lastBlock.pos, (Double)this.breakRange.getValue())) {
            this.different = false;
            this.allow = true;
            this.lastBlock = new PacketMine.breakPos(this.lastBlock.pos, this.lastBlock.facing, System.currentTimeMillis(), this.calcBreakTime(this.lastBlock.pos));
            mc.field_71439_g.field_71174_a.func_147297_a(new CPacketPlayerDigging(Action.START_DESTROY_BLOCK, this.lastBlock.pos, this.lastBlock.facing));
            mc.field_71439_g.field_71174_a.func_147297_a(new CPacketPlayerDigging(Action.STOP_DESTROY_BLOCK, this.lastBlock.pos, this.lastBlock.facing));
            if ((Boolean)this.swing.getValue()) {
               if ((Boolean)this.packetSwing.getValue()) {
                  mc.field_71439_g.field_71174_a.func_147297_a(new CPacketAnimation(EnumHand.MAIN_HAND));
               } else {
                  mc.field_71439_g.func_184609_a(EnumHand.MAIN_HAND);
               }
            }
         }

         if (this.doubleMine != null && this.doubleMine.getEnd() <= System.currentTimeMillis()) {
            int time = (Integer)this.maxTick.getValue() * 50;
            if (this.doubleTimer.passedMs((long)time)) {
               this.resetDouble();
            }
         } else {
            this.doubleTimer.reset();
         }

         if (this.lastBlock != null) {
            this.lastBlock.update();
         }

         if (this.doubleMine != null) {
            this.doubleMine.updateDouble();
         }

         this.isMending = ModuleManager.isModuleEnabled(AutoMend.class);
         this.healthAbove = (double)(mc.field_71439_g.func_110143_aJ() + mc.field_71439_g.func_110139_bj()) >= (Double)this.minHealth.getValue();
         boolean breakDoubleMine = this.doubleMine != null && this.doubleMine.getEnd() <= System.currentTimeMillis() && (!this.isMending || !(Boolean)this.pause.getValue()) && this.healthAbove;
         if (!breakDoubleMine) {
            if (this.bypass != -1) {
               this.switchDouble(this.bypass, true, this.itemStack);
            }

            this.bypass = -1;
         }

         if (this.timer.passedMs((long)(Integer)this.delay.getValue())) {
            this.timer.reset();
            if (this.lastBlock != null && BlockUtil.airBlocks.contains(BlockUtil.getBlock(this.lastBlock.pos)) && this.cev) {
               Entity crystal = this.getCrystal(this.lastBlock.pos);
               this.breakCrystalPiston(crystal);
               if (crystal != null) {
                  this.cev = false;
               }
            }

            if (this.creative()) {
               if (this.lastBlock != null && ((Boolean)this.ignoreChecks.getValue() || !BlockUtil.airBlocks.contains(BlockUtil.getBlock(this.lastBlock.pos)) || this.should)) {
                  mc.field_71442_b.func_180512_c(this.lastBlock.pos, this.lastBlock.facing);
               }

               if (this.doubleMine != null) {
                  mc.field_71442_b.func_180512_c(this.doubleMine.pos, this.doubleMine.facing);
               }

               if ((Boolean)this.swing.getValue()) {
                  if ((Boolean)this.packetSwing.getValue()) {
                     mc.field_71439_g.field_71174_a.func_147297_a(new CPacketAnimation(EnumHand.MAIN_HAND));
                  } else {
                     mc.field_71439_g.func_184609_a(EnumHand.MAIN_HAND);
                  }
               }

               return;
            }

            if (this.lastBlock != null && this.lastBlock.getEnd() <= System.currentTimeMillis() && this.inRange(this.lastBlock.pos, (double)(Integer)this.sendRange.getValue()) && (!(Boolean)this.wait.getValue() || this.doubleMine == null || breakDoubleMine)) {
               boolean breakBlock = !BlockUtil.airBlocks.contains(BlockUtil.getBlock(this.lastBlock.pos)) || this.should;
               if ((Boolean)this.ignoreChecks.getValue() || breakBlock) {
                  boolean civ = false;
                  if ((Boolean)this.place.getValue() && CrystalUtil.canPlaceCrystal(this.lastBlock.pos, (Boolean)this.high.getValue())) {
                     this.cev(this.lastBlock.pos);
                     civ = true;
                  }

                  int slot = this.findItem(this.lastBlock.pos);
                  if ((Boolean)this.autoSwitch.getValue() && slot != mc.field_71439_g.field_71071_by.field_70461_c) {
                     this.itemStack = mc.field_71439_g.field_71071_by.func_70301_a(slot);
                     int oldslot = !(Boolean)this.bypassSwitch.getValue() || (Boolean)this.only.getValue() && slot <= 8 ? mc.field_71439_g.field_71071_by.field_70461_c : slot;
                     this.switchTo(slot, this.itemStack);
                     mc.field_71439_g.field_71174_a.func_147297_a(new CPacketPlayerDigging(Action.STOP_DESTROY_BLOCK, this.lastBlock.pos, this.lastBlock.facing));
                     if ((Boolean)this.switchBack.getValue()) {
                        this.switchTo(oldslot, this.itemStack);
                     }
                  } else {
                     mc.field_71439_g.field_71174_a.func_147297_a(new CPacketPlayerDigging(Action.STOP_DESTROY_BLOCK, this.lastBlock.pos, this.lastBlock.facing));
                  }

                  if ((Boolean)this.swing.getValue()) {
                     if ((Boolean)this.packetSwing.getValue()) {
                        mc.field_71439_g.field_71174_a.func_147297_a(new CPacketAnimation(EnumHand.MAIN_HAND));
                     } else {
                        mc.field_71439_g.func_184609_a(EnumHand.MAIN_HAND);
                     }
                  }

                  if (!(Boolean)this.instant.getValue() && breakBlock) {
                     this.allow = true;
                     this.lastBlock = new PacketMine.breakPos(this.lastBlock.pos, this.lastBlock.facing, System.currentTimeMillis(), this.calcBreakTime(this.lastBlock.pos));
                     mc.field_71439_g.field_71174_a.func_147297_a(new CPacketPlayerDigging(Action.START_DESTROY_BLOCK, this.lastBlock.pos, this.lastBlock.facing));
                     mc.field_71439_g.field_71174_a.func_147297_a(new CPacketPlayerDigging(Action.STOP_DESTROY_BLOCK, this.lastBlock.pos, this.lastBlock.facing));
                     if ((Boolean)this.swing.getValue()) {
                        if ((Boolean)this.packetSwing.getValue()) {
                           mc.field_71439_g.field_71174_a.func_147297_a(new CPacketAnimation(EnumHand.MAIN_HAND));
                        } else {
                           mc.field_71439_g.func_184609_a(EnumHand.MAIN_HAND);
                        }
                     }
                  }

                  if (civ) {
                     Entity crystal = this.getCrystal(this.lastBlock.pos);
                     if (crystal == null) {
                        this.cev = true;
                     } else {
                        this.breakCrystalPiston(crystal);
                     }
                  }
               }
            }

            if (breakDoubleMine && this.bypass == -1) {
               int slot = this.findItem(this.doubleMine.pos);
               this.itemStack = mc.field_71439_g.field_71071_by.func_70301_a(slot);
               this.switchDouble(slot, false, ItemStack.field_190927_a);
               if ((Boolean)this.fastSwitch.getValue()) {
                  this.switchDouble(slot, true, this.itemStack);
               } else {
                  this.bypass = slot;
               }
            }
         }

      } else {
         this.reset();
      }
   }

   private void newDouble() {
      if (this.lastBlock != null && this.doubleMine == null && !this.hadDouble && !BlockUtil.airBlocks.contains(BlockUtil.getBlock(this.lastBlock.pos))) {
         this.resetDouble();
         this.doubleMine = new PacketMine.breakPos(this.lastBlock.pos, this.lastBlock.facing, this.lastBlock.start, this.calcDoubleBreakTime(this.lastBlock.pos));
      }

   }

   private void reset() {
      this.lastBlock = null;
      this.resetDouble();
   }

   private void resetDouble() {
      this.doubleMine = null;
      this.doubleTimer.reset();
      if (this.bypass != -1 && mc.field_71441_e != null && mc.field_71439_g != null && !mc.field_71439_g.field_70128_L) {
         this.switchDouble(this.bypass, true, this.itemStack);
      }

      this.bypass = -1;
   }

   public int findItem(BlockPos pos) {
      return pos == null ? mc.field_71439_g.field_71071_by.field_70461_c : this.findBestTool(pos, mc.field_71441_e.func_180495_p(pos));
   }

   private int findBestTool(BlockPos pos, IBlockState state) {
      int result = mc.field_71439_g.field_71071_by.field_70461_c;
      if (state.func_185887_b(mc.field_71441_e, pos) >= 0.0F) {
         double speed = this.getSpeed(state, mc.field_71439_g.func_184614_ca());

         for(int i = 0; i < ((Boolean)this.bypassSwitch.getValue() ? 36 : 9); ++i) {
            ItemStack stack = mc.field_71439_g.field_71071_by.func_70301_a(i);
            double stackSpeed = this.getSpeed(state, stack);
            if (stackSpeed > speed) {
               speed = stackSpeed;
               result = i;
            }
         }
      }

      return result;
   }

   private double getSpeed(IBlockState state, ItemStack stack) {
      double str = (double)stack.func_150997_a(state);
      int effect = EnchantmentHelper.func_77506_a(Enchantments.field_185305_q, stack);
      return Math.max(str + (str > 1.0D ? (double)(effect * effect) + 1.0D : 0.0D), 0.0D);
   }

   private int calcBreakTime(BlockPos pos) {
      return (int)((double)(this.getBreakTime(pos) * (Integer)this.breakTime.getValue()) * (Double)this.multiplier.getValue());
   }

   private int calcDoubleBreakTime(BlockPos pos) {
      return (int)((double)(this.getBreakTime(pos) * (Integer)this.doubleCalc.getValue()) * (Double)this.multiplier.getValue());
   }

   private int getBreakTime(BlockPos pos) {
      if (!this.creative() && !BlockUtil.airBlocks.contains(mc.field_71441_e.func_180495_p(pos).func_177230_c())) {
         IBlockState blockState = mc.field_71441_e.func_180495_p(pos);
         float hardness = blockState.func_185887_b(mc.field_71441_e, pos);
         if (hardness < 0.0F) {
            return -1;
         } else {
            float breakSpeed = this.getSpeed(pos, blockState);
            if (breakSpeed < 0.0F) {
               return -1;
            } else {
               float relativeDamage = this.getSpeed(pos, blockState) / hardness / 30.0F;
               return (int)Math.ceil((double)(0.7F / relativeDamage));
            }
         }
      } else {
         return 0;
      }
   }

   private float getSpeed(BlockPos pos, IBlockState blockState) {
      int slot = this.findItem(pos);
      ItemStack itemStack = mc.field_71439_g.field_71071_by.func_70301_a(slot);
      float digSpeed = mc.field_71439_g.field_71071_by.func_70301_a(slot).func_150997_a(blockState);
      int efficiencyModifier;
      if (!itemStack.func_190926_b() && (double)digSpeed > 1.0D && (efficiencyModifier = EnchantmentHelper.func_77506_a(Enchantments.field_185305_q, itemStack)) > 0) {
         digSpeed += (float)(StrictMath.pow((double)efficiencyModifier, 2.0D) + 1.0D);
      }

      if (mc.field_71439_g.func_70644_a(MobEffects.field_76422_e)) {
         digSpeed *= 1.0F + (float)(mc.field_71439_g.func_70660_b(MobEffects.field_76422_e).func_76458_c() + 1) * 0.2F;
      }

      if (mc.field_71439_g.func_70644_a(MobEffects.field_76419_f)) {
         float fatigueScale;
         switch(mc.field_71439_g.func_70660_b(MobEffects.field_76419_f).func_76458_c()) {
         case 0:
            fatigueScale = 0.3F;
            break;
         case 1:
            fatigueScale = 0.09F;
            break;
         case 2:
            fatigueScale = 0.0027F;
            break;
         default:
            fatigueScale = 8.1E-4F;
         }

         digSpeed *= fatigueScale;
      }

      if (mc.field_71439_g.func_70055_a(Material.field_151586_h) && !EnchantmentHelper.func_185287_i(mc.field_71439_g)) {
         digSpeed /= 5.0F;
      }

      return digSpeed;
   }

   private void switchTo(int slot, ItemStack itemStack) {
      if (!(Boolean)this.bypassSwitch.getValue() || (Boolean)this.only.getValue() && slot <= 8) {
         if ((Boolean)this.packetSwitch.getValue()) {
            mc.field_71439_g.field_71174_a.func_147297_a(new CPacketHeldItemChange(slot));
         } else {
            mc.field_71439_g.field_71071_by.field_70461_c = slot;
         }

         mc.field_71442_b.func_78765_e();
      } else {
         this.windowClick(slot, itemStack);
      }

   }

   private void windowClick(int slot, ItemStack itemStack) {
      if (slot < 9) {
         slot += 36;
      }

      if ((Boolean)this.packetSwitch.getValue()) {
         mc.field_71439_g.field_71174_a.func_147297_a(new CPacketClickWindow(0, slot, mc.field_71439_g.field_71071_by.field_70461_c, ClickType.SWAP, (Boolean)this.noDesync.getValue() ? itemStack : ItemStack.field_190927_a, mc.field_71439_g.field_71069_bz.func_75136_a(mc.field_71439_g.field_71071_by)));
      } else {
         mc.field_71442_b.func_187098_a(0, slot, mc.field_71439_g.field_71071_by.field_70461_c, ClickType.SWAP, mc.field_71439_g);
      }

      mc.field_71442_b.func_78765_e();
   }

   private void switchDouble(int slot, boolean back, ItemStack itemStack) {
      if (slot >= 0 && slot != mc.field_71439_g.field_71071_by.field_70461_c) {
         if ((Boolean)this.bypassSwitch.getValue() && (!(Boolean)this.only.getValue() || slot > 8)) {
            if (slot < 9) {
               slot += 36;
            }

            mc.field_71439_g.field_71174_a.func_147297_a(new CPacketClickWindow(0, slot, mc.field_71439_g.field_71071_by.field_70461_c, ClickType.SWAP, (Boolean)this.noDesync.getValue() ? itemStack : ItemStack.field_190927_a, mc.field_71439_g.field_71069_bz.func_75136_a(mc.field_71439_g.field_71071_by)));
         } else {
            mc.field_71439_g.field_71174_a.func_147297_a(new CPacketHeldItemChange(back ? mc.field_71439_g.field_71071_by.field_70461_c : slot));
         }

         if ((Boolean)this.update.getValue()) {
            mc.field_71442_b.func_78765_e();
         }

      }
   }

   private boolean creative() {
      String var1 = (String)this.creativeMode.getValue();
      byte var2 = -1;
      switch(var1.hashCode()) {
      case 2052559:
         if (var1.equals("Auto")) {
            var2 = 0;
         }
         break;
      case 75160172:
         if (var1.equals("Never")) {
            var2 = 2;
         }
         break;
      case 1964277295:
         if (var1.equals("Always")) {
            var2 = 1;
         }
      }

      switch(var2) {
      case 0:
         return mc.field_71439_g.func_184812_l_();
      case 1:
         return true;
      case 2:
         return false;
      default:
         return false;
      }
   }

   private void cev(BlockPos pos) {
      int crystalSlot = -1;
      boolean offhand = false;
      if (mc.field_71439_g.func_184592_cb().func_77973_b() instanceof ItemEndCrystal) {
         crystalSlot = 11;
         offhand = true;
      }

      for(int i = 0; i < 36; ++i) {
         ItemStack stack = mc.field_71439_g.field_71071_by.func_70301_a(i);
         if (stack != ItemStack.field_190927_a && crystalSlot == -1 && stack.func_77973_b() instanceof ItemEndCrystal) {
            crystalSlot = i;
            break;
         }
      }

      if (crystalSlot != -1) {
         ItemStack itemStack = mc.field_71439_g.field_71071_by.func_70301_a(crystalSlot);
         int oldslot = mc.field_71439_g.field_71071_by.field_70461_c;
         Entity crystal = this.getCrystal(pos);
         if (crystal == null) {
            if (offhand) {
               mc.field_71439_g.field_71174_a.func_147297_a(new CPacketPlayerTryUseItemOnBlock(pos, EnumFacing.UP, EnumHand.OFF_HAND, 0.0F, 0.0F, 0.0F));
            } else {
               this.switchTo(crystalSlot, ItemStack.field_190927_a);
               mc.field_71439_g.field_71174_a.func_147297_a(new CPacketPlayerTryUseItemOnBlock(pos, EnumFacing.UP, EnumHand.MAIN_HAND, 0.0F, 0.0F, 0.0F));
               this.switchTo(oldslot, itemStack);
            }
         }

      }
   }

   private Entity getCrystal(BlockPos pos) {
      Iterator var2 = mc.field_71441_e.field_72996_f.iterator();

      Entity t;
      do {
         do {
            do {
               if (!var2.hasNext()) {
                  return null;
               }

               t = (Entity)var2.next();
            } while(!(t instanceof EntityEnderCrystal));
         } while(((int)t.field_70165_t != pos.field_177962_a || (int)(t.field_70165_t - 1.0D) != pos.field_177962_a && (int)t.field_70165_t != pos.field_177962_a && (int)(t.field_70165_t + 1.0D) != pos.field_177962_a) && (int)(t.field_70161_v - 1.0D) != pos.field_177961_c && (int)t.field_70161_v != pos.field_177961_c && (int)(t.field_70161_v + 1.0D) != pos.field_177961_c);
      } while((int)t.field_70163_u != pos.field_177960_b + 1);

      return t;
   }

   private void breakCrystalPiston(Entity crystal) {
      if (crystal != null) {
         int oldSlot = mc.field_71439_g.field_71071_by.field_70461_c;
         if ((Boolean)this.antiWeakness.getValue() && mc.field_71439_g.func_70644_a(MobEffects.field_76437_t)) {
            int newSlot = -1;

            for(int i = 0; i < 9; ++i) {
               ItemStack stack = Wrapper.getPlayer().field_71071_by.func_70301_a(i);
               if (stack != ItemStack.field_190927_a) {
                  if (stack.func_77973_b() instanceof ItemSword) {
                     newSlot = i;
                     break;
                  }

                  if (stack.func_77973_b() instanceof ItemTool) {
                     newSlot = i;
                  }
               }
            }

            if (newSlot != -1) {
               this.switchTo(newSlot, ItemStack.field_190927_a);
            }
         }

         if (((String)this.breakCrystal.getValue()).equalsIgnoreCase("Vanilla")) {
            CrystalUtil.breakCrystal(crystal, (Boolean)this.swing.getValue());
         } else if (((String)this.breakCrystal.getValue()).equalsIgnoreCase("Packet")) {
            CrystalUtil.breakCrystalPacket(crystal, (Boolean)this.swing.getValue());
         }

         this.switchTo(oldSlot, ItemStack.field_190927_a);
      }
   }

   private boolean isPos2(BlockPos pos1, BlockPos pos2) {
      if (pos1 != null && pos2 != null) {
         return pos1.field_177962_a == pos2.field_177962_a && pos1.field_177960_b == pos2.field_177960_b && pos1.field_177961_c == pos2.field_177961_c;
      } else {
         return false;
      }
   }

   private boolean inRange(BlockPos pos, double range) {
      return range == 0.0D || mc.field_71439_g.func_70011_f((double)pos.func_177958_n() + 0.5D, (double)pos.func_177956_o() + 0.5D, (double)pos.func_177952_p() + 0.5D) <= range;
   }

   private void setVec3d(BlockPos pos, EnumFacing side) {
      BlockPos neighbour = pos.func_177972_a(side);
      EnumFacing opposite = side.func_176734_d();
      this.lastHitVec = (new Vec3d(neighbour)).func_72441_c(0.5D, 0.5D, 0.5D).func_178787_e((new Vec3d(opposite.func_176730_m())).func_186678_a(0.5D));
   }

   public void onWorldRender(RenderEvent event) {
      float damage;
      GSColor color;
      if (this.lastBlock != null && this.inRange(this.lastBlock.pos, (double)(Integer)this.renderRange.getValue())) {
         damage = (float)(System.currentTimeMillis() - this.lastBlock.getStart()) / (float)this.lastBlock.getTime();
         if (damage > 1.0F || damage < 0.0F) {
            damage = 1.0F;
         }

         color = damage == 1.0F ? this.doneColor.getValue() : this.blockColor.getValue();
         this.renderBox(this.lastBlock.pos, color, damage);
      }

      if ((Boolean)this.double_mine.getValue() && this.doubleMine != null && this.inRange(this.doubleMine.pos, (double)(Integer)this.renderRange.getValue())) {
         damage = (float)(System.currentTimeMillis() - this.doubleMine.getStart()) / (float)this.doubleMine.getTime();
         if (damage > 1.0F || damage < 0.0F) {
            damage = 1.0F;
         }

         color = this.doubleBlockColor.getValue();
         this.renderBox(this.doubleMine.pos, color, damage);
      }

   }

   private GSColor getColor(int damage) {
      return (Boolean)this.customColor.getValue() ? this.progressColor.getColor() : GSColor.fromHSB((float)((1 + damage * 32) % 11520) / 11520.0F, 1.0F, 1.0F);
   }

   private void renderBox(BlockPos blockPos, GSColor color, float mineDamage) {
      AxisAlignedBB getSelectedBoundingBox = new AxisAlignedBB(blockPos);
      float prognoses = mineDamage * 100.0F;
      if ((Boolean)this.showProgress.getValue()) {
         String[] progress = new String[]{String.format("%.0f", prognoses)};
         if ((Integer)this.decimal.getValue() == 1) {
            progress = new String[]{String.format("%.1f", prognoses)};
         } else if ((Integer)this.decimal.getValue() == 2) {
            progress = new String[]{String.format("%.2f", prognoses)};
         }

         RenderUtil.drawNametag((double)blockPos.func_177958_n() + 0.5D, (double)blockPos.func_177956_o() + 0.5D, (double)blockPos.func_177952_p() + 0.5D, progress, this.getColor((int)prognoses), 1, 0.02666666666666667D, 0.0D);
      }

      if ((Boolean)this.display.getValue()) {
         double size = 1.0D;
         if (mineDamage != 1.0F) {
            size = (Boolean)this.instead.getValue() ? Math.pow((double)mineDamage, (double)(Integer)this.pow.getValue()) : 1.0D - Math.pow((double)(1.0F - mineDamage), (double)(Integer)this.pow.getValue());
         }

         String var9 = (String)this.animationMode.getValue();
         byte var10 = -1;
         switch(var9.hashCode()) {
         case -1955878649:
            if (var9.equals("Normal")) {
               var10 = 0;
            }
            break;
         case -913872828:
            if (var9.equals("Horizontal")) {
               var10 = 5;
            }
            break;
         case 2747:
            if (var9.equals("Up")) {
               var10 = 3;
            }
            break;
         case 2136258:
            if (var9.equals("Down")) {
               var10 = 4;
            }
            break;
         case 2043603644:
            if (var9.equals("Desync")) {
               var10 = 2;
            }
            break;
         case 2052876273:
            if (var9.equals("Double")) {
               var10 = 1;
            }
         }

         AxisAlignedBB axisAlignedBB;
         switch(var10) {
         case 0:
            axisAlignedBB = getSelectedBoundingBox.func_186662_g(size / 2.0D - 0.5D);
            break;
         case 1:
            axisAlignedBB = getSelectedBoundingBox.func_186662_g(size / 2.0D - 0.5D);
            if (mineDamage != 1.0F) {
               this.renderESP(getSelectedBoundingBox.func_186662_g(-Math.abs(size / 2.0D - 1.0D)), color, (String)this.renderMode.getValue());
            }
            break;
         case 2:
            if (mineDamage != 1.0F) {
               double boxSize = size + (Double)this.boxExtend.getValue();
               if (boxSize > 1.0D) {
                  boxSize = 1.0D;
               }

               this.renderESP(getSelectedBoundingBox.func_186662_g(-(Double)this.fillStart.getValue() - size * (1.0D - (Double)this.fillStart.getValue())), color, (Boolean)this.doubleRender.getValue() ? "" : "Fill");
               this.renderESP(getSelectedBoundingBox.func_186662_g(-(Double)this.boxStart.getValue() - boxSize * (1.0D - (Double)this.boxStart.getValue())), color, (Boolean)this.doubleRender.getValue() ? "" : "Outline");
            } else {
               this.renderESP(getSelectedBoundingBox, color, (String)this.renderMode.getValue());
            }

            return;
         case 3:
            axisAlignedBB = new AxisAlignedBB(getSelectedBoundingBox.field_72340_a, getSelectedBoundingBox.field_72338_b, getSelectedBoundingBox.field_72339_c, getSelectedBoundingBox.field_72336_d, getSelectedBoundingBox.field_72338_b + (getSelectedBoundingBox.field_72337_e - getSelectedBoundingBox.field_72338_b) * size, getSelectedBoundingBox.field_72334_f);
            break;
         case 4:
            axisAlignedBB = new AxisAlignedBB(getSelectedBoundingBox.field_72340_a, getSelectedBoundingBox.field_72337_e - (getSelectedBoundingBox.field_72337_e - getSelectedBoundingBox.field_72338_b) * size, getSelectedBoundingBox.field_72339_c, getSelectedBoundingBox.field_72336_d, getSelectedBoundingBox.field_72337_e, getSelectedBoundingBox.field_72334_f);
            break;
         case 5:
            AxisAlignedBB bb = getSelectedBoundingBox.func_186662_g(size / 2.0D - 0.5D);
            axisAlignedBB = new AxisAlignedBB(getSelectedBoundingBox.field_72340_a, bb.field_72338_b, getSelectedBoundingBox.field_72339_c, getSelectedBoundingBox.field_72336_d, bb.field_72337_e, getSelectedBoundingBox.field_72334_f);
            break;
         default:
            axisAlignedBB = getSelectedBoundingBox;
         }

         this.renderESP(axisAlignedBB, color, (String)this.renderMode.getValue());
      }
   }

   private AxisAlignedBB scale(AxisAlignedBB box, double scale) {
      double x = box.field_72336_d - box.field_72340_a;
      double y = box.field_72337_e - box.field_72338_b;
      double z = box.field_72334_f - box.field_72339_c;
      Vec3d vec = new Vec3d(x, y, z);
      Vec3d size = vec.func_186678_a(scale - 1.0D);
      return box.func_72314_b(size.field_72450_a, size.field_72448_b, size.field_72449_c);
   }

   private void renderESP(AxisAlignedBB axisAlignedBB, GSColor color, String mode) {
      GSColor fillColor = new GSColor(color, (Integer)this.alpha.getValue());
      GSColor outlineColor = new GSColor(color, 255);
      byte var7 = -1;
      switch(mode.hashCode()) {
      case 2189731:
         if (mode.equals("Fill")) {
            var7 = 0;
         }
         break;
      case 558407714:
         if (mode.equals("Outline")) {
            var7 = 1;
         }
      }

      switch(var7) {
      case 0:
         RenderUtil.drawBox(axisAlignedBB, true, 0.0D, fillColor, 63);
         break;
      case 1:
         RenderUtil.drawBoundingBox(axisAlignedBB, (double)(Integer)this.width.getValue(), outlineColor);
         break;
      default:
         RenderUtil.drawBox(axisAlignedBB, true, 0.0D, fillColor, 63);
         RenderUtil.drawBoundingBox(axisAlignedBB, (double)(Integer)this.width.getValue(), outlineColor);
      }

   }

   public static class breakPos {
      private final BlockPos pos;
      private final EnumFacing facing;
      private final long start;
      private long time;

      public breakPos(BlockPos pos, EnumFacing facing, long start, int time) {
         this.pos = pos;
         this.facing = facing;
         this.start = start;
         this.time = (long)time;
      }

      public BlockPos getPos() {
         return this.pos;
      }

      public EnumFacing getFacing() {
         return this.facing;
      }

      public long getStart() {
         return this.start;
      }

      public long getTime() {
         return this.time;
      }

      public long getEnd() {
         return this.start + this.time;
      }

      public void update() {
         this.time = (long)PacketMine.INSTANCE.calcBreakTime(this.pos);
      }

      public void updateDouble() {
         this.time = (long)PacketMine.INSTANCE.calcDoubleBreakTime(this.pos);
      }
   }
}
