package com.lemonclient.client.module.modules.exploits;

import com.lemonclient.api.event.events.PacketEvent;
import com.lemonclient.api.setting.values.BooleanSetting;
import com.lemonclient.api.setting.values.IntegerSetting;
import com.lemonclient.api.util.chat.Notification;
import com.lemonclient.api.util.misc.MessageBus;
import com.lemonclient.client.module.Category;
import com.lemonclient.client.module.Module;
import com.mojang.realmsclient.gui.ChatFormatting;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.function.Predicate;
import me.zero.alpine.listener.EventHandler;
import me.zero.alpine.listener.Listener;
import net.minecraft.block.Block;
import net.minecraft.entity.Entity;
import net.minecraft.entity.item.EntityMinecartChest;
import net.minecraft.entity.item.EntityMinecartHopper;
import net.minecraft.entity.passive.EntityDonkey;
import net.minecraft.entity.passive.EntityLlama;
import net.minecraft.init.Blocks;
import net.minecraft.init.SoundEvents;
import net.minecraft.network.play.server.SPacketSoundEffect;
import net.minecraft.tileentity.TileEntity;
import net.minecraft.tileentity.TileEntityBeacon;
import net.minecraft.tileentity.TileEntityBed;
import net.minecraft.tileentity.TileEntityChest;
import net.minecraft.tileentity.TileEntityDispenser;
import net.minecraft.tileentity.TileEntityDropper;
import net.minecraft.tileentity.TileEntityEnderChest;
import net.minecraft.tileentity.TileEntityHopper;
import net.minecraft.tileentity.TileEntityNote;
import net.minecraft.tileentity.TileEntityShulkerBox;
import net.minecraft.util.SoundCategory;
import net.minecraft.util.math.BlockPos;
import net.minecraftforge.client.event.InputUpdateEvent;

@Module.Declaration(
   name = "StashFinder",
   category = Category.Exploits
)
public class StashFinder extends Module {
   BooleanSetting chest = this.registerBoolean("Chests", true);
   IntegerSetting minChestCount = this.registerInteger("MinChestCount", 4, 0, 100);
   BooleanSetting enderChest = this.registerBoolean("Ender Chests", true);
   BooleanSetting shulker = this.registerBoolean("Shulker boxes", true);
   BooleanSetting hopper = this.registerBoolean("Hoppers", true);
   BooleanSetting dispenser = this.registerBoolean("Dispensers", true);
   BooleanSetting dropper = this.registerBoolean("Droppers", true);
   BooleanSetting noteBlock = this.registerBoolean("Note Block", true);
   BooleanSetting beacon = this.registerBoolean("Beacon", true);
   BooleanSetting donkey = this.registerBoolean("Donkey", true);
   BooleanSetting llama = this.registerBoolean("Llama", true);
   BooleanSetting only = this.registerBoolean("Only Owned", true);
   BooleanSetting chestCart = this.registerBoolean("Chest Minecart", true);
   BooleanSetting hopperCart = this.registerBoolean("Hopper Minecart", true);
   BooleanSetting lightning = this.registerBoolean("Thunders", false);
   BooleanSetting bed = this.registerBoolean("Bed", true);
   BooleanSetting autoWalk = this.registerBoolean("AutoWalk", false);
   BooleanSetting chat = this.registerBoolean("Send Message", true);
   HashMap<BlockPos, Integer> chests = new HashMap();
   HashMap<BlockPos, Integer> shulkers = new HashMap();
   HashMap<BlockPos, Integer> enderChests = new HashMap();
   HashMap<BlockPos, Integer> hoppers = new HashMap();
   HashMap<BlockPos, Integer> dispensers = new HashMap();
   HashMap<BlockPos, Integer> droppers = new HashMap();
   HashMap<BlockPos, Integer> noteBlocks = new HashMap();
   HashMap<BlockPos, Integer> beacons = new HashMap();
   ArrayList<BlockPos> countedChests = new ArrayList();
   ArrayList<BlockPos> countedEnderChests = new ArrayList();
   ArrayList<BlockPos> countedShulkers = new ArrayList();
   ArrayList<BlockPos> countedHoppers = new ArrayList();
   ArrayList<BlockPos> countedDispensers = new ArrayList();
   ArrayList<BlockPos> countedDroppers = new ArrayList();
   ArrayList<BlockPos> countedNoteBlocks = new ArrayList();
   ArrayList<BlockPos> countedBeacons = new ArrayList();
   ArrayList<BlockPos> thunders = new ArrayList();
   ArrayList<BlockPos> donkeys = new ArrayList();
   ArrayList<BlockPos> llamas = new ArrayList();
   ArrayList<BlockPos> chestCarts = new ArrayList();
   ArrayList<BlockPos> hopperCarts = new ArrayList();
   ArrayList<BlockPos> beds = new ArrayList();
   @EventHandler
   public Listener<PacketEvent.Send> listener = new Listener((event) -> {
      BlockPos pos = null;
      if ((Boolean)this.lightning.getValue() && event.getPacket() instanceof SPacketSoundEffect) {
         SPacketSoundEffect packet = (SPacketSoundEffect)event.getPacket();
         if (packet.func_186977_b() == SoundCategory.WEATHER && packet.func_186978_a() == SoundEvents.field_187754_de) {
            ((BlockPos)pos).func_177963_a(packet.func_149207_d(), packet.func_149211_e(), packet.func_149210_f());
            this.thunders.add(pos);
            if ((Boolean)this.chat.getValue()) {
               MessageBus.sendClientPrefixMessage(ChatFormatting.GOLD + "Lightning spawned at X" + packet.func_149207_d() + " Z" + packet.func_149210_f(), Notification.Type.INFO);
            }
         }
      }

   }, new Predicate[0]);
   @EventHandler
   private final Listener<InputUpdateEvent> inputUpdateEventListener = new Listener((event) -> {
      if ((Boolean)this.autoWalk.getValue() && mc.field_71439_g != null) {
         event.getMovementInput().field_192832_b = 1.0F;
      }

   }, new Predicate[0]);

   public void onUpdate() {
      int chestCount = 0;
      int enderCount = 0;
      int shulkerCount = 0;
      int hopperCount = 0;
      int dispenserCount = 0;
      int dropperCount = 0;
      int noteBlockCount = 0;
      int beaconCount = 0;
      Iterator var9 = mc.field_71441_e.field_147482_g.iterator();

      while(true) {
         BlockPos pos;
         Iterable posIterable;
         Iterator var13;
         BlockPos blockPos;
         do {
            TileEntity tileEntity;
            do {
               do {
                  if (!var9.hasNext()) {
                     var9 = mc.field_71441_e.field_72996_f.iterator();

                     while(var9.hasNext()) {
                        Entity entity = (Entity)var9.next();
                        pos = entity.func_180425_c();
                        if (entity instanceof EntityDonkey && !this.donkeys.contains(pos)) {
                           this.donkeys.add(pos);
                           if ((Boolean)this.chat.getValue() && (Boolean)this.donkey.getValue() && (!(Boolean)this.only.getValue() || ((EntityDonkey)entity).func_184780_dh() != null)) {
                              MessageBus.sendClientPrefixMessage("Found a donkey at" + pos, Notification.Type.INFO);
                           }
                        }

                        if (entity instanceof EntityLlama && !this.llamas.contains(pos)) {
                           this.llamas.add(pos);
                           if ((Boolean)this.chat.getValue() && (Boolean)this.llama.getValue() && (!(Boolean)this.only.getValue() || ((EntityLlama)entity).func_184780_dh() != null)) {
                              MessageBus.sendClientPrefixMessage("Found a llama at" + pos, Notification.Type.INFO);
                           }
                        }

                        if (entity instanceof EntityMinecartChest && !this.chestCarts.contains(pos)) {
                           this.chestCarts.add(pos);
                           if ((Boolean)this.chat.getValue() && (Boolean)this.chestCart.getValue()) {
                              MessageBus.sendClientPrefixMessage("Found a chest minecart at" + pos, Notification.Type.INFO);
                           }
                        }

                        if (entity instanceof EntityMinecartHopper && !this.hopperCarts.contains(pos)) {
                           this.hopperCarts.add(pos);
                           if ((Boolean)this.chat.getValue() && (Boolean)this.hopperCart.getValue()) {
                              MessageBus.sendClientPrefixMessage("Found a hopper minecart at" + pos, Notification.Type.INFO);
                           }
                        }
                     }

                     return;
                  }

                  tileEntity = (TileEntity)var9.next();
                  pos = tileEntity.func_174877_v();
                  if (tileEntity instanceof TileEntityChest && !this.chests.containsKey(pos) && !this.countedChests.contains(pos)) {
                     posIterable = BlockPos.func_177980_a(pos.func_177982_a(-12, -12, -12), pos.func_177982_a(12, 12, 12));
                     var13 = posIterable.iterator();

                     while(var13.hasNext()) {
                        blockPos = (BlockPos)var13.next();
                        if (mc.field_71441_e.func_180495_p(blockPos).func_177230_c() == Blocks.field_150486_ae) {
                           this.countedChests.add(blockPos);
                           ++chestCount;
                        }
                     }

                     if (chestCount >= (Integer)this.minChestCount.getValue()) {
                        this.chests.put(pos, chestCount);
                        if ((Boolean)this.chat.getValue() && (Boolean)this.chest.getValue()) {
                           MessageBus.sendClientPrefixMessage("Found " + chestCount + "x chest at " + this.getFormattedBlockPos(pos), Notification.Type.INFO);
                        }
                     }

                     chestCount = 0;
                  }

                  if (tileEntity instanceof TileEntityEnderChest && !this.enderChests.containsKey(pos) && !this.countedEnderChests.contains(pos)) {
                     posIterable = BlockPos.func_177980_a(pos.func_177982_a(-12, -12, -12), pos.func_177982_a(12, 12, 12));
                     var13 = posIterable.iterator();

                     while(var13.hasNext()) {
                        blockPos = (BlockPos)var13.next();
                        if (mc.field_71441_e.func_180495_p(blockPos).func_177230_c() == Blocks.field_150477_bB) {
                           this.countedEnderChests.add(blockPos);
                           ++enderCount;
                        }
                     }

                     if (enderCount >= 1) {
                        this.enderChests.put(pos, enderCount);
                        if ((Boolean)this.chat.getValue() && (Boolean)this.enderChest.getValue()) {
                           MessageBus.sendClientPrefixMessage("Found " + enderCount + "x ender chest at " + this.getFormattedBlockPos(pos), Notification.Type.INFO);
                        }
                     }

                     enderCount = 0;
                  }

                  if (tileEntity instanceof TileEntityShulkerBox && !this.shulkers.containsKey(pos) && !this.countedShulkers.contains(pos)) {
                     posIterable = BlockPos.func_177980_a(pos.func_177982_a(-12, -12, -12), pos.func_177982_a(12, 12, 12));
                     var13 = posIterable.iterator();

                     while(var13.hasNext()) {
                        blockPos = (BlockPos)var13.next();
                        if (this.isShulkerBox(blockPos)) {
                           this.countedShulkers.add(blockPos);
                           ++shulkerCount;
                        }
                     }

                     if (shulkerCount >= 1) {
                        this.shulkers.put(pos, shulkerCount);
                        if ((Boolean)this.chat.getValue() && (Boolean)this.shulker.getValue()) {
                           MessageBus.sendClientPrefixMessage("Found " + shulkerCount + "x shulker at " + this.getFormattedBlockPos(pos), Notification.Type.INFO);
                        }
                     }

                     shulkerCount = 0;
                  }

                  if (tileEntity instanceof TileEntityBed && !this.beds.contains(pos)) {
                     this.beds.add(pos);
                     if ((Boolean)this.chat.getValue() && (Boolean)this.bed.getValue()) {
                        MessageBus.sendClientPrefixMessage("Found a bed at" + pos, Notification.Type.INFO);
                     }
                  }

                  if (tileEntity instanceof TileEntityHopper && !this.hoppers.containsKey(pos) && !this.countedHoppers.contains(pos)) {
                     posIterable = BlockPos.func_177980_a(pos.func_177982_a(-12, -12, -12), pos.func_177982_a(12, 12, 12));
                     var13 = posIterable.iterator();

                     while(var13.hasNext()) {
                        blockPos = (BlockPos)var13.next();
                        if (mc.field_71441_e.func_180495_p(blockPos).func_177230_c() == Blocks.field_150438_bZ) {
                           this.countedHoppers.add(blockPos);
                           ++hopperCount;
                        }
                     }

                     if (hopperCount >= 1) {
                        this.hoppers.put(pos, hopperCount);
                        if ((Boolean)this.chat.getValue() && (Boolean)this.hopper.getValue()) {
                           MessageBus.sendClientPrefixMessage("Found " + hopperCount + "x hopper at " + this.getFormattedBlockPos(pos), Notification.Type.INFO);
                        }
                     }

                     hopperCount = 0;
                  }

                  if (tileEntity instanceof TileEntityDispenser && !this.dispensers.containsKey(pos) && !this.countedDispensers.contains(pos)) {
                     posIterable = BlockPos.func_177980_a(pos.func_177982_a(-12, -12, -12), pos.func_177982_a(12, 12, 12));
                     var13 = posIterable.iterator();

                     while(var13.hasNext()) {
                        blockPos = (BlockPos)var13.next();
                        if (mc.field_71441_e.func_180495_p(blockPos).func_177230_c() == Blocks.field_150367_z) {
                           this.countedDispensers.add(blockPos);
                           ++dispenserCount;
                        }
                     }

                     if (dispenserCount >= 1) {
                        this.dispensers.put(pos, dispenserCount);
                        if ((Boolean)this.chat.getValue() && (Boolean)this.dispenser.getValue()) {
                           MessageBus.sendClientPrefixMessage("Found " + dispenserCount + "x dispenser at " + this.getFormattedBlockPos(pos), Notification.Type.INFO);
                        }
                     }

                     dispenserCount = 0;
                  }

                  if (tileEntity instanceof TileEntityDropper && !this.droppers.containsKey(pos) && !this.countedDroppers.contains(pos)) {
                     posIterable = BlockPos.func_177980_a(pos.func_177982_a(-12, -12, -12), pos.func_177982_a(12, 12, 12));
                     var13 = posIterable.iterator();

                     while(var13.hasNext()) {
                        blockPos = (BlockPos)var13.next();
                        if (mc.field_71441_e.func_180495_p(blockPos).func_177230_c() == Blocks.field_150409_cd) {
                           this.countedDroppers.add(blockPos);
                           ++dropperCount;
                        }
                     }

                     if (dropperCount >= 1) {
                        this.droppers.put(pos, dropperCount);
                        if ((Boolean)this.chat.getValue() && (Boolean)this.dropper.getValue()) {
                           MessageBus.sendClientPrefixMessage("Found " + dropperCount + "x dropper at " + this.getFormattedBlockPos(pos), Notification.Type.INFO);
                        }
                     }

                     dropperCount = 0;
                  }

                  if (tileEntity instanceof TileEntityNote && !this.noteBlocks.containsKey(pos) && !this.countedNoteBlocks.contains(pos)) {
                     posIterable = BlockPos.func_177980_a(pos.func_177982_a(-12, -12, -12), pos.func_177982_a(12, 12, 12));
                     var13 = posIterable.iterator();

                     while(var13.hasNext()) {
                        blockPos = (BlockPos)var13.next();
                        if (mc.field_71441_e.func_180495_p(blockPos).func_177230_c() == Blocks.field_150323_B) {
                           this.countedNoteBlocks.add(blockPos);
                           ++noteBlockCount;
                        }
                     }

                     if (noteBlockCount >= 1) {
                        this.noteBlocks.put(pos, noteBlockCount);
                        if ((Boolean)this.chat.getValue() && (Boolean)this.noteBlock.getValue()) {
                           MessageBus.sendClientPrefixMessage("Found " + noteBlockCount + "x note block at " + this.getFormattedBlockPos(pos), Notification.Type.INFO);
                        }
                     }

                     noteBlockCount = 0;
                  }
               } while(!(tileEntity instanceof TileEntityBeacon));
            } while(this.beacons.containsKey(pos));
         } while(this.countedBeacons.contains(pos));

         posIterable = BlockPos.func_177980_a(pos.func_177982_a(-12, -12, -12), pos.func_177982_a(12, 12, 12));
         var13 = posIterable.iterator();

         while(var13.hasNext()) {
            blockPos = (BlockPos)var13.next();
            if (mc.field_71441_e.func_180495_p(blockPos).func_177230_c() == Blocks.field_150461_bJ) {
               this.countedBeacons.add(blockPos);
               ++beaconCount;
            }
         }

         if (beaconCount >= 1) {
            this.beacons.put(pos, beaconCount);
            if ((Boolean)this.chat.getValue() && (Boolean)this.beacon.getValue()) {
               MessageBus.sendClientPrefixMessage("Found " + beaconCount + "x beacon at " + this.getFormattedBlockPos(pos), Notification.Type.INFO);
            }
         }

         beaconCount = 0;
      }
   }

   public void onDisable() {
      try {
         DateFormat df = new SimpleDateFormat("yy-MM-dd");
         DateFormat df2 = new SimpleDateFormat("HH-mm");
         Date date = new Date();
         Date date2 = new Date();
         File file = new File("LemonClient/StashFinder/" + df.format(date) + " " + df2.format(date2) + ".txt");
         if (!file.exists()) {
            file.getParentFile().mkdirs();

            try {
               file.createNewFile();
            } catch (IOException var12) {
               var12.printStackTrace();
            }
         }

         FileOutputStream fop = new FileOutputStream(file);
         OutputStreamWriter writer = new OutputStreamWriter(fop);
         this.thunders.forEach((blockPos) -> {
            try {
               if ((Boolean)this.lightning.getValue()) {
                  writer.append("Thunder spawned at ").append(this.getFormattedBlockPos(blockPos)).append("\n");
               }
            } catch (IOException var4) {
            }

         });
         this.beds.forEach((blockPos) -> {
            try {
               if ((Boolean)this.bed.getValue()) {
                  writer.append("bed at ").append(this.getFormattedBlockPos(blockPos)).append("\n");
               }
            } catch (IOException var4) {
            }

         });
         this.chests.forEach((blockPos, integer) -> {
            try {
               if ((Boolean)this.chest.getValue() && integer >= (Integer)this.minChestCount.getValue()) {
                  writer.append(integer.toString()).append("x chest at ").append(this.getFormattedBlockPos(blockPos)).append("\n");
               }
            } catch (IOException var5) {
            }

         });
         this.enderChests.forEach((blockPos, integer) -> {
            try {
               if ((Boolean)this.enderChest.getValue() && integer >= 1) {
                  writer.append(integer.toString()).append("x ender chest at ").append(this.getFormattedBlockPos(blockPos)).append("\n");
               }
            } catch (IOException var5) {
            }

         });
         this.shulkers.forEach((blockPos, integer) -> {
            try {
               if ((Boolean)this.shulker.getValue() && integer >= 1) {
                  writer.append(integer.toString()).append("x shulker at ").append(this.getFormattedBlockPos(blockPos)).append("\n");
               }
            } catch (IOException var5) {
            }

         });
         this.hoppers.forEach((blockPos, integer) -> {
            try {
               if ((Boolean)this.hopper.getValue() && integer >= 1) {
                  writer.append(integer.toString()).append("x hopper at ").append(this.getFormattedBlockPos(blockPos)).append("\n");
               }
            } catch (IOException var5) {
            }

         });
         this.dispensers.forEach((blockPos, integer) -> {
            try {
               if ((Boolean)this.dispenser.getValue() && integer >= 1) {
                  writer.append(integer.toString()).append("x dispenser at ").append(this.getFormattedBlockPos(blockPos)).append("\n");
               }
            } catch (IOException var5) {
            }

         });
         this.droppers.forEach((blockPos, integer) -> {
            try {
               if ((Boolean)this.dropper.getValue() && integer >= 1) {
                  writer.append(integer.toString()).append("x dropper at ").append(this.getFormattedBlockPos(blockPos)).append("\n");
               }
            } catch (IOException var5) {
            }

         });
         this.noteBlocks.forEach((blockPos, integer) -> {
            try {
               if ((Boolean)this.noteBlock.getValue() && integer >= 1) {
                  writer.append(integer.toString()).append("x note block at ").append(this.getFormattedBlockPos(blockPos)).append("\n");
               }
            } catch (IOException var5) {
            }

         });
         this.beacons.forEach((blockPos, integer) -> {
            try {
               if ((Boolean)this.beacon.getValue() && integer >= 1) {
                  writer.append(integer.toString()).append("x beacon at ").append(this.getFormattedBlockPos(blockPos)).append("\n");
               }
            } catch (IOException var5) {
            }

         });
         this.donkeys.forEach((blockPos) -> {
            try {
               if ((Boolean)this.donkey.getValue()) {
                  writer.append("donkey at ").append(this.getFormattedBlockPos(blockPos)).append("\n");
               }
            } catch (IOException var4) {
            }

         });
         this.chestCarts.forEach((blockPos) -> {
            try {
               if ((Boolean)this.chestCart.getValue()) {
                  writer.append("chest minecart at ").append(this.getFormattedBlockPos(blockPos)).append("\n");
               }
            } catch (IOException var4) {
            }

         });
         this.hopperCarts.forEach((blockPos) -> {
            try {
               if ((Boolean)this.hopperCart.getValue()) {
                  writer.append("hopper minecart at ").append(this.getFormattedBlockPos(blockPos)).append("\n");
               }
            } catch (IOException var4) {
            }

         });
         writer.close();
         fop.close();
         MessageBus.sendClientPrefixMessage("File output succeed", Notification.Type.SUCCESS);
      } catch (IOException var13) {
         MessageBus.sendClientPrefixMessage("File output exception:" + var13, Notification.Type.ERROR);
      } finally {
         this.beds.clear();
         this.chests.clear();
         this.donkeys.clear();
         this.shulkers.clear();
         this.enderChests.clear();
         this.hoppers.clear();
         this.dispensers.clear();
         this.droppers.clear();
         this.noteBlocks.clear();
         this.beacons.clear();
         this.countedEnderChests.clear();
         this.countedShulkers.clear();
         this.countedChests.clear();
         this.countedHoppers.clear();
         this.countedDispensers.clear();
         this.countedDroppers.clear();
         this.countedNoteBlocks.clear();
         this.countedBeacons.clear();
      }

   }

   private String getFormattedBlockPos(BlockPos blockPos) {
      String done = blockPos.toString().replaceAll("BlockPos\\{", "");
      done = done.replaceAll("}", "");
      done = done.replaceAll("=", "= ");
      return done;
   }

   private Boolean isShulkerBox(BlockPos blockPos) {
      List<Block> shulkerList = Arrays.asList(Blocks.field_190977_dl, Blocks.field_190978_dm, Blocks.field_190979_dn, Blocks.field_190980_do, Blocks.field_190981_dp, Blocks.field_190982_dq, Blocks.field_190983_dr, Blocks.field_190984_ds, Blocks.field_190985_dt, Blocks.field_190986_du, Blocks.field_190987_dv, Blocks.field_190988_dw, Blocks.field_190989_dx, Blocks.field_190990_dy, Blocks.field_190991_dz, Blocks.field_190975_dA);
      return shulkerList.contains(mc.field_71441_e.func_180495_p(blockPos).func_177230_c());
   }
}
